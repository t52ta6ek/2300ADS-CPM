;
; *****
; ***** ADS CP/M CONSOLE I/O DRIVERS (CRT AND KEYBOARD)
; ***** TOM DE LELLIS
; ***** 11/29/85
; *****
; ***** TERMINAL CHARACTERISTICS
; *****
; *****		01H	HOME CURSOR LOWER LEFT
; *****		06H	NON DESTRUCTIVE FOWARD SPACE (CURSOR RIGHT)
; *****		07H	FLASH SCREEN ONCE
; *****		08H	NON DESTRUCTIVE BACKSPACE (CURSOR LEFT)
; *****		09H	NON DESTRUCTIVE TAB 8 SPACES RIGHT
; *****		0AH	NON DESTRUCTIVE LINE FEED (CURSOR DOWN)
; *****		0CH	CLEAR SCREEN AND HOME CURSOR UPPER LEFT
; *****		0DH	NON DESTRUCTIVE CARRIGE RETURN
; *****		15H	NON DESTRUCTIVE BACKSPACE (CURSOR LEFT)
; *****		1AH	NON DESTRUCTIVE UP LINE FEED (CURSOR UP)
; *****		1BH	START ESCAPE SEQUENCE
; *****		1CH	HOME CURSOR UPPER LEFT
; *****		20H	DESTRUCTIVE FOWARD SPACE (SPACE)
; *****		7FH	DESTRUCTIVE BACKSPACE
; *****
; ***** ESCAPE SEQUENCES
; *****
; *****		<ESC>L		INSERT LINE
; *****		<ESC>M		DELETE LINE
; *****		<ESC>K		ERASE TO END OF LINE
; *****		<ESC>k		ERASE TO END OF SCREEN
; *****		<ESC>0x		IGNORE x
; *****		<ESC>1		GRAPHICS MODE OFF (DISPLAY ASCII)
; *****		<ESC>2		GRAPHICS MODE ON (GRAPHICS FROM @.._)
; *****		<ESC>3		CURSOR OFF
; *****		<ESC>4		CURSOR ON
; *****		<ESC>Yrc	RANDOM CURSOR ADDRESSING
; *****				r = ROW    (0..23) PLUS OFFSET OF 32
; *****				c = COLUMN (0..79) PLUS OFFSET OF 32
; *****
;
	.Z80
	CSEG
;
	PUBLIC	CONST
	PUBLIC	KBIN
	PUBLIC	CRTOUT 			; PRINT A CHARACTER
	PUBLIC	NCSRFLG			; CURSOR ON/OFF FLAG
	PUBLIC	GRFLAG			; GRAPHICS ON/OFF FLAG
;
	EXTRN	CRTRAM
;
FALSE	EQU	X'00'			; FALSE VALUE
TRUE	EQU	X'FF'			; TRUE VALUE
;
; *****
; ***** KEYBOARD VALUES
; *****
;
KBDATA	EQU	X'F0'			; DATA PORT
KBSTAT	EQU	X'F1'			; STATUS PORT
KBRES	EQU	X'F2'			; RESET STATUS PORT
KBRDY	EQU	X'01'			; READY FLAG
;
; *****
; ***** CAPS TOGGLE KEYS
; *****
;
CPKEY1	EQU	X'F4'			; <CAPS>
CPKEY2	EQU	X'E4'			; <SHIFT><CAPS>
;
; *****
; ***** CONTROL FUNCTIONS
; *****
;
KBEL	EQU	X'07'			; BEL
KBS	EQU	X'08'			; BS
KHT	EQU	X'09'			; HT
KLF	EQU	X'0A'			; LF
KFF	EQU	X'0C'			; FF
KCR	EQU	X'0D'			; CR
KLS	EQU	X'15'			; NAK
KSP	EQU	X'20'			; SP
KDEL	EQU	X'7F'			; DEL
KHUL	EQU	X'1C'			; FS
KHLL	EQU	X'01'			; SOH
KNLF	EQU	X'1A'			; SUB
KFS	EQU	X'06'			; ACK
;
; *****
; ***** KEYBOARD STATUS
; ***** EXIT CONDITIONS = A = 0 IF NOTHING TYPED ELSE A = FF
; *****
;
CONST:
	IN	A,(KBSTAT)		; GET STATUS
	AND	KBRDY			; WAS ANYTHING TYPED
	RET	Z			; IF NOT, EXIT
	IN	A,(KBDATA)		; GET THE KEY
	CP	CPKEY1			; WAS IT THE CAPS LOCK
	JR	Z,CPTOGGLR		; IF YES, TOGGLE IT
	CP	CPKEY2			; WAS IT THE OTHER CAPS LOCK
	JR	Z,CPTOGGLR		; IF SO, TOGGLE IT TOO
	LD	A,TRUE			; ELSE SAY TRUE
	RET				; EXIT
CPTOGGLR:
	IN	A,(KBRES)		; CLEAR KEYBOARD STROBE
	LD	A,(CPFLAG)		; LOAD CURRENT CAPS FLAG
	CPL				; TOGGLE IT
	LD	(CPFLAG),A		; STORE NEW VALUE
	XOR	A			; ZERO A
	RET				; EXIT
;
; *****
; ***** WAIT FOR A KEY TO BE PRESSED
; ***** EXIT CONDITIONS = A CHARACTER TYPED
; *****
;
KBIN:
	CALL	CONST			; GET CONSOLE STATUS
	JR	Z,KBIN			; IF NOT, WAIT
KBDIN1:
	IN	A,(KBRES)		; RESET STATUS
	IN	A,(KBDATA)		; GET THE KEY
	LD	E,A			; SAVE KEYPRESS
	LD	BC,KEYTBLN		; LOAD LENGTH OF KEY TRANSLATION TABLE
	LD	HL,KEY			; START OF KEY TABLE TO SEARCH
	CPIR				; LOOK FOR KEY
	JR	NZ,KEYCODE		; IF KEY NOT FOUND, THEN JUMP
	LD	HL,CODE			; ELSE POINT TO START OF CODE TABLE
	ADD	HL,BC			; ADD OFFSET TO POINT TO CODE
	LD	E,(HL)			; GET TRANSLATED KEY CODE INTO E
KEYCODE:
	LD	A,(CPFLAG)		; GET CAPS FLAG
	OR	A			; IS IT ON
	LD	A,E			; GET CHARACTER
	RET	Z			; NO, LOWER CASE SO EXIT
	CP	'A'			; WAS KEY < 'A'
	RET	C			; YES, DO NOTHING AND EXIT
	CP	'Z'+X'01'		; WAS KEY <='Z'
	JR	C,FLIP			; YES, JUMP TO FLIP CASE
	CP	'a'			; WAS KEY < 'a'
	RET	C			; YES, DO NOTHING AND EXIT
	CP	'z'+X'01'		; WAS KEY <='z'
	RET	NC			; NO, DO NOTHING AND EXIT
FLIP:
	XOR	X'20'			; FLIP CHARACTER CASE
	RET				; EXIT
;
; *****
; ***** JUMP TO FUNCTION
; *****
;
CRTOUT:
	LD	A,C			; PUT CHARACTER INTO C
	AND	X'7F'			; MAKE IT 7 BIT ASCII
	CP	X'1B'			; WAS THE CHARACTER AN ESCAPE
	JR	Z,ESCCODE		; IF YES, SET JUMP VECTOR
	LD	DE,(CURSOR)		; LOAD ROW/COLUMN POINTER
	LD	HL,(TVVECTOR)		; LOAD VECTOR TO JUMP TO
	JP	(HL)			; JUMP TO IT
ESCCODE:
	LD	HL,ESCFUNC		; LOAD THE ESCAPE FUNCTION VECTOR
	LD	(TVVECTOR),HL		; SAVE IT IN THE JUMP VECTOR
	RET				; EXIT
;
; *****
; ***** MAIN LOOP. DETERMINE CHARACTER TYPE AND DISPLAY
; *****
;
TVDISP:
	CP	X'20'			; CHECK CHARACTER TYPE
	JR	NC,TVDISP1		; IF CHARACTER > CONTROL, SEE TVDISP1
	CP	KLF			; WAS CHARACTER A LINE FEED
	JR	Z,TVLF			; IF YES, DO A LF
	CP	KCR			; WAS IT A CR
	JP	Z,TVCR			; IF YES, DO A CR
	CP	KFF			; WAS IT A FF
	JP	Z,TVCLR			; IF YES, DO A FF
	CP	KBEL			; WAS IT BEL
	JP	Z,TVBEL			; IF YES, FLASH SCREEN INSTEAD
	CP	KHT			; WAS IT A HT
	JP	Z,TVTAB			; IF YES, DO A HT
	CP	KBS			; WAS IT A BS
	JP	Z,TVBS			; IF YES, DO A BS
	CP	KHUL			; WAS IT A FS
	JP	Z,TVHUL			; IF YES, HOME CURSOR UPPER LEFT
	CP 	KHLL			; WAS IT SOH
	JP	Z,TVHLL			; IF YES, HOME CURSOR LOWER LEFT
	CP	KFS			; WAS IT ACK
	JR	Z,TVFS			; IF YES, FOWARD CURSOR
	CP	KNLF			; WAS IT SUB
	JP	Z,TVNLF			; IF YES, UP LINE
	CP	KLS			; WAS IT NAK
	JP	Z,TVBS			; IF SO, BACKSPACE
	CP	X'21'			; IS THE CHARACTER STILL CONTROL CODE
	RET	C			; IF YES, IGNORE IT
TVDISP1:
	CALL	LOADPTR			; COMPUTE ACTUAL CURSOR ADDRESS
	CP	KSP			; WAS IT SP
	JR	Z,TVSTOR		; IF YES, PRINT A SPACE
	LD	C,A			; SAVE CHARACTER IN C
	CP	KDEL			; WAS THE CHARACTER DEL
	JP	Z,TVBS			; IF YES, JUMP TO TVBS
	LD	A,(GRFLAG)		; GET THE GRAPHICS FLAG
	OR	A			; IS IT ON
	LD	A,C			; RESTORE CHARACTER IN A
	JR	Z,TVSTOR		; IF FLAG IS OFF, PRINT ASCII
	CP	'@'			; IS CHARACTER < '@'
	RET	C			; IF YES, IGNORE IT
	CP	'@'+X'20'		; IS IT > '_'
	RET	NC			; IF YES, IGNORE IT
	SUB	X'40'			; MAKE CHARACTER A GRAPHICS CODE
TVSTOR:
	LD	(HL),A			; MOVE CHARACTER TO SCREEN
TVFS:
	INC	E			; INCREMENT COLUMN
	LD	A,E			; MOVE COLUMN TO A
TVFS1:
	CP	80			; IS COLUMN OFF THE SCREEN
	JR	C,TVEND4		; IF NOT, EXIT
	LD	E,0			; SET COLUMN TO 0
TVLF:
	INC	D			; INCREMENT ROW
	LD	A,D			; MOVE ROW TO A
	CP	24			; IS ROW OFF THE SCREEN
	JR	NZ,TVEND4		; IF NOT, EXIT
	DEC	D			; DECREMENT ROW
	PUSH	DE			; SAVE ROW ON STACK
	LD	HL,CRTRAM+80		; LOAD SOURCE ADDRESS TO MOVE
	LD	DE,CRTRAM		; LOAD DESTINATION ADDRESS
	LD	BC,80*23		; LOAD LENGTH TO MOVE
	LDIR				; MOVE IT
	POP	DE			; RESTORE ROW FROM STACK
	LD	HL,CRTRAM+23*80		; LOAD ADDRESS OF LAST LINE
	LD	B,80			; LOAD LENGTH OF LINE
TVCANLP:
	LD	(HL),' '		; WIPE CELL CLEAN
	INC	HL			; POINT TO NEXT COLUMN
	DJNZ	TVCANLP			; SEE TVCANLP 80 TIMES
TVEND4:
	LD	(CURSOR),DE		; STORE ROW/COLUMN POINTER
NEWCURS:
	LD	A,(NCSRFLG)		; GET CURSOR FLAG
	OR	A			; IS IT ON
	RET	NZ			; IF NOT, EXIT
	LD	A,X'80'			; LOAD 8275 CURSOR CONTROL COMMAND
	OUT	(X'F3'),A		; SEND IT TO CRT CONTROLLER
	LD	A,(CURSOR)		; GET THE COLUMN
	OUT	(X'F2'),A		; SEND IT TO CRT CONTROLLER
	LD	A,(CURSOR+X'01')	; GET THE ROW
	OUT	(X'F2'),A		; SEND IT TO CRT CONTROLLER
	RET				; SAY GOOD-BYE
;
; *****
; ***** CLEAR SCREEN AND HOME CURSOR UPPER LEFT
; *****
;
TVCLR:
	LD	HL,CRTRAM		; LOAD ADDRESS OF CRT
	LD	DE,CRTRAM+1		; CRT ADDRESS PLUS 1
	LD	BC,80*24-1		; LOAD LENGTH OF CRT
	LD	(HL),' '		; WIPE CRT CELL CLEAN
TVCLR1:
	LDIR				; BLANK THRU WHOLE SCREEN
TVHUL:
	LD	D,0			; SET ROW TO 0
TVCR:
	LD	E,0			; SET COLUMN TO 0
	JP	TVEND4			; EXIT
;
; *****
; ***** TAB 8 SPACES
; *****
;
TVTAB:
	LD	A,E			; GET COLUMN
	ADD	A,X'08'			; ADD 8 TO IT
	JR	NC,TVTAB1		; IF NOT PAST LAST COLUMN SEE TVTAB1
	INC	D			; INCREMENT ROW
TVTAB1:
	AND	X'F8'			; TRUNCATE EXTRA SPACES
	LD	E,A			; PUT NEW COLUMN INTO E
	JP	TVFS1			; INCREMENT CURSOR POSITION
;
; *****
; ***** BACKSPACE/DELETE
; *****
;
TVBS:
	XOR	A			; SET A TO 0
	CP	E			; IS COLUMN 0
	JR	NZ,TVBS1		; IF NOT, DO A BS
	CP	D			; IS ROW 0
	RET	Z			; IF YES, THEN EXIT
	LD	E,80			; SET COLUMN TO 80
	DEC	D			; DECREMENT ROW
TVBS1:
	DEC	E			; DECREMENT COLUMN
	DEC	HL			; DECREMENT CURSOR ADDRESS
	LD	A,C			; PUT CHARACTER INTO A
	CP	KDEL			; IS CHARACTER DEL
	JP	NZ,TVEND4		; IF NOT, EXIT
	LD	(HL),' '		; WIPE CELL
	JP	TVEND4			; EXIT
;
; *****
; ***** HOME CURSOR LOWER LEFT
; *****
;
TVHLL:
	LD	DE,X'1700'		; SET ROW TO 23, COLUMN TO 0
	JP	TVEND4			; EXIT
;
; *****
; ***** NEGATIVE LINE FEED
; *****
;
TVNLF:
	XOR	A			; GET 0 FOR COMPARE
	CP	D			; IS ROW 0
	RET	Z			; EXIT IF SO
	DEC	D			; DECREMENT ROW
	JP	TVEND4			; EXIT
;
; *****
; ***** BEL, FLASH SCREEN
; *****
;
TVBEL:
	LD	A,(CRTRAM)		; GET CHARACTER AT FIRST SCREEN CELL
	PUSH	AF			; SAVE IT
	LD	A,X'91'			; HIGHLIGHT INVERSE COMMAND
	LD	(CRTRAM),A		; PUT HIGHLIGHT INVERSE INTO CELL
	LD	BC,X'0A80'		; VALUE FOR DELAY
TVBEL1:
	DEC	BC			; DECREMENT DELAY
	LD	A,B			; PUT HIGH BYTE INTO A
	OR	C			; OR IT WITH LOW BYTE
	JR	NZ,TVBEL1		; IF NOT 0 THEN DO IT AGAIN
	POP	AF			; RESTORE CHARACTER
	LD	(CRTRAM),A		; PUT IT BACK
	RET				; EXIT
;
; *****
; ***** COMPUTE CURSOR ADDRESS FROM ROW/COLUMN POINTER
; *****
;
LOADPTR:
	LD	H,X'00'			; SET H TO 0
	LD	L,D			; PUT ROW INTO L
	ADD	HL,HL			; ROW X 2
	ADD	HL,HL			;     X 4
	ADD	HL,HL			;     X 8
	LD	B,H			; PUT H INTO B
	LD	C,L			; PUT L INTO C
	ADD	HL,HL			;     X 16
	ADD	HL,HL			;     X 32
	ADD	HL,BC			;     + 8 = 40
	ADD	HL,HL			;     X 2 = 80
	LD	B,X'00'			; SET B TO 0
	LD	C,E			; PUT COLUMN INTO C
	ADD	HL,BC			; ADD IT TO VIDEO ADDRESS
	LD	BC,CRTRAM		; LOAD OFFSET ADDRESS OF CRT
	ADD	HL,BC			; ADD IT TO CURSOR ADDRESS
	RET				; RETURN
;
; *****
; ***** DETERMINE ESCAPE FUNCTION
; *****
;
ESCFUNC:
	CP	'Y'			; WAS CHARACTER 'Y'
	JP	Z,TGLDCAD		; IF YES, READY TO POSITION CURSOR
	CP	'M'			; WAS IT 'M'
	JP	Z,TVDELLN		; IF YES, DELETE CURRENT LINE
	CP	'L'			; WAS IT 'L'
	JP	Z,TVINSLN		; IF YES, INSERT A LINE
	CP	'0'			; WAS IT '0'
	JP	Z,EATNEXT		; IGNORE NEXT CHARACTER
	CP	'1'			; WAS IT '1'
	JP	Z,TGLGRPH0		; IF YES, TOGGLE GRAPHICS OFF
	CP	'2'			; WAS IT '2'
	JP	Z,TGLGRPH1		; IF YES, TOGGLE GRAPHICS ON
	CP	'3'			; WAS IT '3'
	JP	Z,TGLCSR0		; IF YES, TOGGLE CURSOR OFF
	CP	'4'			; WAS IT '4'
	JP	Z,TGLCSR1		; IF YES, TOGGLE CURSOR ON
	CALL	LOADPTR			; COMPUTE ACTUAL CURSOR ADDRESS
	CP	'K'			; WAS IT 'K'
	JP	Z,TVEEOL		; IF YES, ERASE TO END OF LINE
	CP	'k'			; WAS IT 'k'
	JP	Z,TVEEOS		; IF YES, ERASE TO END OF SCREEN
RESVECT:
	LD	HL,TVDISP		; LOAD ADDRESS OF STANDARD DISPLAY
RESVECT1:
	LD	(TVVECTOR),HL		; STORE IT IN THE JUMP VECTOR
	RET				; EXIT
EATNEXT:
	LD	HL,RESVECT		; LOAD ADDRESS OF VECTOR RESET
	JR	RESVECT1		; STORE IT
;
; *****
; ***** TOGGLE GRAPHICS MODE ON/OFF
; *****
;
TGLGRPH0:
	XOR	A			; LOAD A FALSE
TGLGRPH:
	LD	(GRFLAG),A		; SAVE IT
	JP	RESVECT			; RESET JUMP VECTOR
TGLGRPH1:
	LD	A,TRUE			; LOAD A TRUE
	JR	TGLGRPH			; SEE TGLGRPH
;
; *****
; ***** TOGGLE CURSOR ON/OFF
; *****
;
TGLCSR0:
	LD	A,TRUE			; LOAD A TRUE
	LD	(NCSRFLG),A		; SAVE IT
	LD	A,X'80'			; LOAD 8275 CURSOR CONTROL COMMAND
	OUT	(X'F3'),A		; SEND IT TO CRT CONTROLLER
	LD	A,X'FF'			; LOAD CURSOR OFF
	OUT	(X'F2'),A		; SEND IT TO CRT CONTROLLER
	OUT	(X'F2'),A		; SEND IT TO CRT CONTROLLER
	JP	RESVECT			; RESET JUMP VECTOR
TGLCSR1:
	XOR	A			; LOAD A FALSE
	LD	(NCSRFLG),A		; SAVE IT
	JP	SETCSR			; SEE SETCSR
;
; *****
; ***** SET JUMP VECTOR TO RECEIVE CURSOR ADDRESSING
; *****
;
TGLDCAD:
	LD	HL,YVECTOR		; LOAD Y POSITION CALCULATOR
	JP	RESVECT1		; GO STORE IT
;
; *****
; ***** INSERT A LINE
; *****
;
TVINSLN:
	LD	E,0			; CURSOR TO BEGINNING OF LINE
	CALL	LOADPTR			; COMPUTE ACTUAL ADDRESS
	PUSH	DE			; SAVE X/Y CURSOR ADDRESS
	PUSH	HL			; SAVE MEMORY ADDRESS
	LD	A,23			; LAST LINE OF CRT
	CP	D			; WAS CURSOR ON IT?
	JR	Z,TVINS1		; JUMP IF SO
	EX	DE,HL			; PUT SCREEN MEMORY ADDRESS INTO DE
	LD	HL,CRTRAM+80*23		; LOAD HL WITH LAST LINE
	OR	A			; CLEAR CARRY
	SBC	HL,DE			; COMPUTE LENGTH TO MOVE
	PUSH	HL			; SAVE IT
	LD	HL,CRTRAM+(80*23)-1	; LAST COL ON NEXT TO LAST LINE
	LD	DE,CRTRAM+(80*24)-1	; LAST COL ON LAST LINE
	POP	BC			; GET LENGTH TO MOVE
	LDDR				; OPEN UP A LINE
TVINS1:
	POP	HL			; MEMORY ADDRESS OF CURSOR
	LD	B,80			; 80 CELLS TO ERASE
TVINS2:
	LD	(HL),' '		; WIPE CELL
	INC	HL			; POINT TO NEXT CELL
	DJNZ	TVINS2			; ERASE UNTIL DONE
	CALL	RESVECT			; RESET ESCAPE JUMP VECTOR TO NORMAL
	POP	DE			; GET X/Y CURSOR ADDRESS
	JP	TVEND4			; SHOW NEW CURSOR LOCATION
;
; *****
; ***** DELETE A LINE
; *****
;
TVDELLN:
	LD	E,0			; CURSOR TO BEGINNING OF LINE
	CALL	LOADPTR			; COMPUTE ACTUAL MEMORY ADDRESS
	PUSH	DE			; SAVE X/Y CURSOR ADDRESS
	LD	A,23			; LAST LINE OF CRT
	CP	D			; WAS CURSOR ON IT?
	JR	Z,TVDELN1		; JUMP IF SO
	EX	DE,HL			; PUT SCREEN MEMORY ADDRESS INTO DE
	LD	HL,CRTRAM+80*23		; LOAD HL WITH LAST LINE
	OR	A			; CLEAR CARRY
	SBC	HL,DE			; COMPUTE LENGTH TO MOVE
	PUSH	HL			; SAVE LENGTH
	LD	HL,80			; LOAD HL WITH 80
	ADD	HL,DE			; ADD CURRENT MEM, POINT TO NEXT LINE
	POP	BC			; RECALL LENGTH
	LDIR				; PULL IN A LINE
TVDELN1:
	LD	HL,CRTRAM+80*23		; LAST LINE OF CRT
	LD	B,80			; NUMBER OF CELLS TO WIPE
TVDELN2:
	LD	(HL),' '		; WIPE THE CELL
	INC	HL			; POINT TO NEXT CELL
	DJNZ	TVDELN2			; WIPE UNTIL DONE
	CALL	RESVECT			; RESET ESCAPE JUMP VECTOR
	POP	DE			; RECALL X/Y CURSOR ADDRESS
	JP	TVEND4			; EXIT
;
; *****
; ***** ERASE TO THE END OF A LINE
; *****
;
TVEEOL:
	LD	A,E			; PUT COLUMN INTO A
TVEEOLL:
	LD	(HL),' '		; WIPE CELL
	CP	79			; HAS COLUMN REACHED 79 YET
	JP	Z,RESVECT		; IF YES, THEN EXIT
	INC	HL			; INCREMENT CELL POINTER
	INC	A			; INCREMENT COLUMN POINTER
	JR	TVEEOLL			; SEE TVEEOL
;
; *****
; ***** ERASE TO THE END OF THE SCREEN
; *****
;
TVEEOS:
	LD	C,D			; PUT ROW INTO C
	LD	A,24			; PUT LAST ROW+1 INTO A
	SUB	C			; FIND NUMBER OF ROWS TO ERASE
	LD	C,A			; PUT IT INTO C
	LD	A,80			; PUT LAST COLUMN+1 INTO A
	SUB	E			; FIND NUMBER OF COLUMNS TO ERASE
	LD	B,A			; PUT IT INTO B
	JR	TVEEOSCL		; ERASE CURRENT LINE
TVEEOSLL:
	LD	B,80			; LOAD LENGTH OF NEXT LINE
TVEEOSCL:
	LD	(HL),' '		; WIPE CELL
	INC	HL			; INCREMENT CURSOR ADDRESS
	DJNZ	TVEEOSCL		; SEE TVEEOSCL 80 TIMES
	DEC	C			; DECREMENT ROWS TO GO
	JR	NZ,TVEEOSLL		; IF NOT 0 SEE TVEEOSLL
	JP	RESVECT			; RESET JUMP VECTOR
;
; *****
; ***** FIND YX VALUE FOR CURSOR ADDRESSING
; *****
;
YVECTOR:
	CP	X'20'			; IS Y < 0+32
	JR	C,YVECT1		; IF YES, IGNORE IT
	CP	X'20'+24		; IS Y > 23+32
	JR	NC,YVECT1		; IF YES, IGNORE IT
	SUB	X'20'			; STRIP ASCII VALUE
	LD	(CURSOR+X'01'),A	; STORE IT IN ROW POINTER
YVECT1:
	LD	HL,XVECTOR		; LOAD X POSITION CALCULATOR
	JP	RESVECT1		; GO STORE IT
XVECTOR:
	CP	X'20'			; IS X < 0+32
	JR	C,SETCSR		; IF YES, IGNORE IT
	CP	X'20'+80		; IS X > 79+32
	JR	NC,SETCSR		; IF YES, IGNORE IT
	SUB	X'20'			; STRIP ASCII VALUE
	LD	(CURSOR),A		; STORE IT IN COLUMN POINTER
SETCSR:
	LD	HL,TVDISP		; LOAD ADDRESS OF STANDARD DISPLAY
	LD	(TVVECTOR),HL		; STORE IT IN THE JUMP VECTOR
	JP	NEWCURS			; DISPLAY NEW CURSOR POSITION
;
; *****
; ***** CRT DRIVER DATA
; *****
;
	DSEG
;
; *****
; ***** ADS FUNCTION KEY TRANSLATION TABLES
; *****
;
KEY:
	DEFB	X'F7',X'E7',X'F8',X'E8'	; REVERSE ORDER FROM CODE TABLE
KEYTBLN	EQU	$-KEY
CODE:
	DEFB	'`','|','~','\'		; REVERSE ORDER FROM KEY TABLE
;
; *****
; ***** STORAGE FOR JUMP VECTOR
; *****
;
TVVECTOR:
	DEFW	TVDISP
;
; *****
; ***** STORAGE FOR ROW/COLUMN POINTER
; *****
;
CURSOR:
	DEFW	X'0000'
;
; *****
; ***** STORAGE FOR FLAGS;
; *****
;
GRFLAG:
	DEFB	FALSE			; GRAPHICS FLAG
NCSRFLG:
	DEFB	FALSE			; CURSOR FLAG
CPFLAG:
	DEFB	TRUE			; CAPS FLAG
;
	END
